[
  {
    "href": "using_r.html#starting-r",
    "title": "R4Pi.org",
    "section": "Starting R",
    "text": "R has it’s own interactive REPL (Read-eval-print loop) and this is where many R users on Linux will start.\nOpening a terminal and typing R at the command prompt will start the REPL.\nsellorm@raspberrypi $ R\n\nR version 4.0.4 (2021-02-15) -- \"Lost Library Book\"\nCopyright (C) 2021 The R Foundation for Statistical Computing\nPlatform: armv7l-unknown-linux-gnueabihf (32-bit)\n\nR is free software and comes with ABSOLUTELY NO WARRANTY.\nYou are welcome to redistribute it under certain conditions.\nType 'license()' or 'licence()' for distribution details.\n\n  Natural language support but running in an English locale\n\nR is a collaborative project with many contributors.\nType 'contributors()' for more information and\n'citation()' on how to cite R or R packages in publications.\n\nType 'demo()' for some demos, 'help()' for on-line help, or\n'help.start()' for an HTML browser interface to help.\nType 'q()' to quit R.\n\n> \nR starts up with messages about the version and license and so on.\nAt this point you’re running R and you can start to do all sorts of fun things.\nLet’s start with a couple of basics."
  },
  {
    "href": "using_r.html#the-basics",
    "title": "R4Pi.org",
    "section": "The basics",
    "text": "A quick note about conventions: Throughtout this page you’ll see R commands that you should type in prefacted by the > symbol. This is R’s default “prompt”. You don’t need to type that, just everything that follows it.\nLet’s try some maths. Type the following and hit ‘return’:\n> 3192 / 76\nNote: R, like most programming languages, uses / for division and * for multiplication.\nR should output:\n[1] 42\nDon’t worry too much about the [1] for now, that’s just R’s way of saying that it’s the first result. As you’ll learn later we can return many results at once and knowing which position things are in is more useful then.\nNow let’s try some text…\nLet’s assign a variable. A variable is a way of saving something for later. This could be a number or some text, or any one of a number of things.\n> my_name <- \"sellorm\"\nR will look like it’s not done anything and return you straight to the > prompt. Assigning a variable is a silent operation, so R doesn’t bother to tell us anything when all goes according to plan.\nWe can see what value our variable has by typeing it’s name and hitting return:\n> my_name\nThis will output:\n[1] \"sellorm\"\n(There’s that [1] again!)\nLet’s use out variable in another command. Try this:\n> cat(\"Hello\", my_name, \"\\n\")\nThis one should print the following to the screen:\nHello sellorm\nThe cat command is R’s built-in ‘concatenate’ function, but it’s often used for outputting simple messages like this.\nHopefully the content of the command we ran makes sense – joining the word “Hello” with the name we stored earlier – but you may be wondering about the \"\\n\" on the end. This tells R to print a “new line”. Without it, the message would still be printed, but out prompt would directly follow the output.\nTry it:\n> cat(\"Hello\", my_name)\nHello sellorm>\nSee how the prompt is now stuck on the end of the output? This isn’t a problem, it just looks messy and makes it harder to see where you are.\nLastly (for now!), we’re going to run a couple of R’s built-in demos.\nTry this one first:\n> demo(graphics)\nThis demo will open another window, and display some pre-canned plots created with the built in plotting tools. R has a really powerful graphics system and the built in plotting tools are great, however, if you want to take your plots to the next level check out the ‘ggplot2’ package.\n\nTo cycle through the demo plots, make sure the terminal window has focus and hit return.\nWhen no more plots are displayed and you have a bunch of >s stacking up in the REPL, you know you reached the end of the demo. You can close the graphics windows that opened now.\nNext try this one:\ndemo(image)\nAgain, press enter to see the next example. The code for each example is shown in the REPL too, so you can start to get a feel for how you might be able to start creating some plots of your own.\nNow that we’ve played around a little in R, we should exit the REPL.\nThe official way to do this is with the quit() funtion, but R’s developers have given us a handy alias, q(), to use instead.\n> q()\nSave workspace image? [y/n/c]: n\nWhen we run q(), R will ask us if we want to save our “workspace”. The workspace contains all the variables we creaed and packages that we’ve loaded. It’s generally considered to be bad practice to save the workspace, as it can get us into trouble later on, so always answer with “n”.\nEventually, even this might feel like too much typing and someone will point out that you can accomplish the same thing by pressing “ctrl+d” twice, so feel free to do that instead if you prefer."
  },
  {
    "href": "using_r.html#installing-packages",
    "title": "R4Pi.org",
    "section": "Installing packages",
    "text": "In the R world, add-on packages that provide useful functions or otherwise extend the language in some way, come from CRAN. CRAN serves pre-compiled binaries of these packages to Mac and Windows users, but Linux users (like us!) only get the source code.\nThis makes sense as there are a very large number of Linux distributions out there and compiling binaries for all of them isn’t feasible. Source code is the default for all Linux OSes then, but it can also be difficult to work with. As an end user, having to compile packages from source can be time consuming and packages also often require specific build-time dependencies, that you’d need to make sure were available.\nTo make this process easier, the R4Pi project runs it’s own CRAN mirror that only contains a small subset of some of the most popular packages available in the public CRAN. Since we know exactly which version of Linux you’ll be using, we’re able to compile packages for you, making installation simpler and much quicker!\nYou can see the default mirror by running the following inside of R:\n> options(\"repos\")\nPackages are installed as usual using, for example:\n> install.packages(\"tidyverse\")\nIf you need to install a package that’s not available in our mirror, you can still use public CRAN, either by adding it to the list of available repos, or by specifying where a particular package should come from, like this:\n> install.packages(<PACKAGE_NAME>, repos = \"https://cloud.r-project.org\")"
  },
  {
    "href": "index.html#background",
    "title": "R4Pi.org",
    "section": "Background",
    "text": "R is the premier language for statistical computing and has millions of users around the world.\nThere’s already a build available for the Raspberry Pi in the default OS repos, but it’s a quite an old version.\nWe provide up-to-date builds of R and also take a number of the extension packages from CRAN and pre-compile them ready for use on the Pi to make installation fast and simple."
  },
  {
    "href": "index.html#r-in-action",
    "title": "R4Pi.org",
    "section": "R in action",
    "text": "It’s possible to write R code in any text editor and a number of the text editors and IDEs available for the Pi support R either straight out-of-the-box or, as in the VSCode screenshot below, with the addition of a plugin.\n\nThe screenshot above shows some of the analytical and plotting capabilities of R with code borrowed from the “palmerpenguins” package website."
  },
  {
    "href": "tutorials/index.html#contributing-a-tutorial",
    "title": "R4Pi.org",
    "section": "Contributing a tutorial",
    "text": "If you’d like to contribute a short, beginner-friendly tutorial for users of R4Pi.org, we’d love to share it with our users! We’d be happy to link to your tutorial, or even host it here. Please let us know by raising an issue on this repo."
  },
  {
    "href": "tutorials/further_reading.html#understanding-the-basics",
    "title": "R4Pi.org",
    "section": "Understanding the basics",
    "text": "R for Data Science (R4DS)\nWe think the best place to start is by working through the exercises in the book R for Data Science (often just referred to as “R4DS”). You can buy a physical copy of the book, but you can also read the whole thing online, for free!\n\n\nModernDive\nAnother great book that’s more statistics-heavy that you can read for free online is, “Statistical Inference via Data Science: A ModernDive into R and the Tidyverse” (you can just call this one “ModernDive”).\n\n\nLearning Statistics with R\nLearning Statistics with R"
  },
  {
    "href": "tutorials/further_reading.html#for-experienced-programmers",
    "title": "R4Pi.org",
    "section": "For experienced programmers",
    "text": "A good place to start might be the “learn X in Y minutes” overview."
  },
  {
    "href": "tutorials/further_reading.html#for-experienced-r-programmers",
    "title": "R4Pi.org",
    "section": "For experienced R programmers",
    "text": "Hadley Wickham’s Advanced R is also available online."
  },
  {
    "href": "installation.html#pre-requisites",
    "title": "R4Pi.org",
    "section": "Pre-requisites",
    "text": "You must be running the official Raspberry Pi OS (previously called Raspbian) on your system and it must be up to date.\n\n\n\n\n\n\nWarning!\n\n\n\nTechnically, the software should work on all versions of the Pi, however due to memory constraints with older versions and the Pi Zero, we recommend a Raspberry Pi 4 with 2G or more of RAM.\n\n\nYou can check your Raspberry Pi model in a terminal with:\ncat /sys/firmware/devicetree/base/model;echo\nYou are, of course, welcome to run the software on any Raspberry Pi, but you should expect poor performance on systems with low memory."
  },
  {
    "href": "installation.html#about-the-r4pi-r-biuld",
    "title": "R4Pi.org",
    "section": "About the r4pi R biuld",
    "text": "Our build of R tracks the R Project’s current “release” version.\nThis is essentially the latest version of R available"
  },
  {
    "href": "installation.html#setting-things-up",
    "title": "R4Pi.org",
    "section": "Setting things up",
    "text": "Before you can install the r4pi build of R, we need configure access to the r4pi.org software repository.\ncurl -O  http://debs.r4pi.org/pool/main/r/r4pi-repo-conf/r4pi-repo-conf_0.1.0-5_armhf.deb\nsudo dpkg -i  r4pi-repo-conf_0.1.0-5_armhf.deb\nsudo apt update\nYou’re now ready to install our build of R."
  },
  {
    "href": "installation.html#installing-the-software",
    "title": "R4Pi.org",
    "section": "Installing the software",
    "text": "Now that you’ve configured your system, we can go ahead and install the software.\nFirst update all your sources:\nsudo apt update\nYou should see the new r4pi.org source in the output somewhere.\nNext install any updates that are available - note that this can take some time.\nsudo apt upgrade\nFinally, install the r4pi build of R.\nsudo apt install r4pi\nAssuming that’s successful, you’re now ready to start using R.\nYou can start R by running:\nR\nType ctrl+d twice to exit."
  }
]